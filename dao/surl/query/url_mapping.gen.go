// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"starry/dao/surl/model"
)

func newURLMapping(db *gorm.DB, opts ...gen.DOOption) uRLMapping {
	_uRLMapping := uRLMapping{}

	_uRLMapping.uRLMappingDo.UseDB(db, opts...)
	_uRLMapping.uRLMappingDo.UseModel(&model.URLMapping{})

	tableName := _uRLMapping.uRLMappingDo.TableName()
	_uRLMapping.ALL = field.NewAsterisk(tableName)
	_uRLMapping.ID = field.NewInt32(tableName, "id")
	_uRLMapping.Surl = field.NewString(tableName, "surl")
	_uRLMapping.Lurl = field.NewString(tableName, "lurl")
	_uRLMapping.EffectiveDays = field.NewInt32(tableName, "effective_days")
	_uRLMapping.CreateTime = field.NewTime(tableName, "create_time")
	_uRLMapping.UpdateTime = field.NewTime(tableName, "update_time")
	_uRLMapping.UpdateBy = field.NewTime(tableName, "update_by")
	_uRLMapping.Deleted = field.NewString(tableName, "deleted")

	_uRLMapping.fillFieldMap()

	return _uRLMapping
}

// uRLMapping 短链和长链的映射表
type uRLMapping struct {
	uRLMappingDo uRLMappingDo

	ALL           field.Asterisk
	ID            field.Int32  // 自增主键
	Surl          field.String // 短链
	Lurl          field.String // 长链
	EffectiveDays field.Int32  // defualt:6天
	CreateTime    field.Time   // 记录创建时间
	UpdateTime    field.Time   // 记录更新时间
	UpdateBy      field.Time   // 记录更新人
	Deleted       field.String // 删除标记

	fieldMap map[string]field.Expr
}

func (u uRLMapping) Table(newTableName string) *uRLMapping {
	u.uRLMappingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uRLMapping) As(alias string) *uRLMapping {
	u.uRLMappingDo.DO = *(u.uRLMappingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uRLMapping) updateTableName(table string) *uRLMapping {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Surl = field.NewString(table, "surl")
	u.Lurl = field.NewString(table, "lurl")
	u.EffectiveDays = field.NewInt32(table, "effective_days")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.UpdateBy = field.NewTime(table, "update_by")
	u.Deleted = field.NewString(table, "deleted")

	u.fillFieldMap()

	return u
}

func (u *uRLMapping) WithContext(ctx context.Context) *uRLMappingDo {
	return u.uRLMappingDo.WithContext(ctx)
}

func (u uRLMapping) TableName() string { return u.uRLMappingDo.TableName() }

func (u uRLMapping) Alias() string { return u.uRLMappingDo.Alias() }

func (u uRLMapping) Columns(cols ...field.Expr) gen.Columns { return u.uRLMappingDo.Columns(cols...) }

func (u *uRLMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uRLMapping) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["surl"] = u.Surl
	u.fieldMap["lurl"] = u.Lurl
	u.fieldMap["effective_days"] = u.EffectiveDays
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["update_by"] = u.UpdateBy
	u.fieldMap["deleted"] = u.Deleted
}

func (u uRLMapping) clone(db *gorm.DB) uRLMapping {
	u.uRLMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uRLMapping) replaceDB(db *gorm.DB) uRLMapping {
	u.uRLMappingDo.ReplaceDB(db)
	return u
}

type uRLMappingDo struct{ gen.DO }

func (u uRLMappingDo) Debug() *uRLMappingDo {
	return u.withDO(u.DO.Debug())
}

func (u uRLMappingDo) WithContext(ctx context.Context) *uRLMappingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uRLMappingDo) ReadDB() *uRLMappingDo {
	return u.Clauses(dbresolver.Read)
}

func (u uRLMappingDo) WriteDB() *uRLMappingDo {
	return u.Clauses(dbresolver.Write)
}

func (u uRLMappingDo) Session(config *gorm.Session) *uRLMappingDo {
	return u.withDO(u.DO.Session(config))
}

func (u uRLMappingDo) Clauses(conds ...clause.Expression) *uRLMappingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uRLMappingDo) Returning(value interface{}, columns ...string) *uRLMappingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uRLMappingDo) Not(conds ...gen.Condition) *uRLMappingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uRLMappingDo) Or(conds ...gen.Condition) *uRLMappingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uRLMappingDo) Select(conds ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uRLMappingDo) Where(conds ...gen.Condition) *uRLMappingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uRLMappingDo) Order(conds ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uRLMappingDo) Distinct(cols ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uRLMappingDo) Omit(cols ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uRLMappingDo) Join(table schema.Tabler, on ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uRLMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uRLMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uRLMappingDo) Group(cols ...field.Expr) *uRLMappingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uRLMappingDo) Having(conds ...gen.Condition) *uRLMappingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uRLMappingDo) Limit(limit int) *uRLMappingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uRLMappingDo) Offset(offset int) *uRLMappingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uRLMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uRLMappingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uRLMappingDo) Unscoped() *uRLMappingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uRLMappingDo) Create(values ...*model.URLMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uRLMappingDo) CreateInBatches(values []*model.URLMapping, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uRLMappingDo) Save(values ...*model.URLMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uRLMappingDo) First() (*model.URLMapping, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMapping), nil
	}
}

func (u uRLMappingDo) Take() (*model.URLMapping, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMapping), nil
	}
}

func (u uRLMappingDo) Last() (*model.URLMapping, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMapping), nil
	}
}

func (u uRLMappingDo) Find() ([]*model.URLMapping, error) {
	result, err := u.DO.Find()
	return result.([]*model.URLMapping), err
}

func (u uRLMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.URLMapping, err error) {
	buf := make([]*model.URLMapping, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uRLMappingDo) FindInBatches(result *[]*model.URLMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uRLMappingDo) Attrs(attrs ...field.AssignExpr) *uRLMappingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uRLMappingDo) Assign(attrs ...field.AssignExpr) *uRLMappingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uRLMappingDo) Joins(fields ...field.RelationField) *uRLMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uRLMappingDo) Preload(fields ...field.RelationField) *uRLMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uRLMappingDo) FirstOrInit() (*model.URLMapping, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMapping), nil
	}
}

func (u uRLMappingDo) FirstOrCreate() (*model.URLMapping, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMapping), nil
	}
}

func (u uRLMappingDo) FindByPage(offset int, limit int) (result []*model.URLMapping, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uRLMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uRLMappingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uRLMappingDo) Delete(models ...*model.URLMapping) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uRLMappingDo) withDO(do gen.Dao) *uRLMappingDo {
	u.DO = *do.(*gen.DO)
	return u
}
